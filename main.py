import os
import logging
import datetime
import re
import aiosqlite
import dateparser
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    CallbackQueryHandler,
    ContextTypes,
    CallbackContext,
    filters,
)

# =========================
# –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø
# =========================

TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise ValueError("‚ùå –ó–º—ñ–Ω–Ω–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

(
    CHOOSING_TYPE,
    CHOOSING_DATE,
    CHOOSING_TIME,
    INPUT_CITY,
    INPUT_PHONE,
    INPUT_PRICE,
) = range(6)

MAIN_MENU_KEYBOARD = [
    ["–î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è"],
    ["–ü–µ—Ä–µ–≥–ª—è–¥ –∑–∞–≤–¥–∞–Ω—å"],
    ["–í–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è"],
    ["–°—É–º–∞ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å"],
    ["–ù–∞ –ø–æ—á–∞—Ç–æ–∫"],
]

# =========================
# –ë–ê–ó–ê –î–ê–ù–ò–•
# =========================

class TaskManager:
    def __init__(self, db_name="tasks.db"):
        self.db_name = db_name

    async def init_db(self):
        async with aiosqlite.connect(self.db_name) as db:
            await db.execute('''CREATE TABLE IF NOT EXISTS tasks (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                type TEXT,
                datetime TEXT,
                city TEXT,
                phone TEXT,
                price REAL,
                name TEXT,
                status TEXT,
                completed_date TEXT
            )''')
            await db.commit()

    async def save_task(self, user_id: int, task: dict):
        async with aiosqlite.connect(self.db_name) as db:
            await db.execute('''INSERT INTO tasks 
                VALUES (NULL, ?, ?, ?, ?, ?, ?, ?, ?, ?)''', (
                user_id,
                task["type"],
                task["datetime"].isoformat(),
                task["city"],
                task["phone"],
                task["price"],
                task["name"],
                "uncompleted",
                None,
            ))
            await db.commit()

    async def get_tasks(self, user_id: int, status: str = None):
        async with aiosqlite.connect(self.db_name) as db:
            query = 'SELECT * FROM tasks WHERE user_id = ?' + (f' AND status = "{status}"' if status else '')
            cursor = await db.execute(query, (user_id,))
            return await cursor.fetchall()

    async def delete_task(self, task_id: int):
        async with aiosqlite.connect(self.db_name) as db:
            await db.execute('DELETE FROM tasks WHERE id = ?', (task_id,))
            await db.commit()

    async def complete_task(self, task_id: int):
        async with aiosqlite.connect(self.db_name) as db:
            await db.execute('''UPDATE tasks 
                SET status = ?, completed_date = ?
                WHERE id = ?''', (
                "completed",
                datetime.datetime.now().isoformat(),
                task_id
            ))
            await db.commit()

    async def get_all_users(self):
        async with aiosqlite.connect(self.db_name) as db:
            cursor = await db.execute('SELECT DISTINCT user_id FROM tasks')
            return await cursor.fetchall()

task_manager = TaskManager()

# =========================
# –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á
# =========================

def get_main_menu():
    return ReplyKeyboardMarkup(MAIN_MENU_KEYBOARD, resize_keyboard=True)

def extract_data(text: str) -> dict:
    patterns = {
        "date": r"\b(\d{1,2}[./-]\d{1,2}[./-]\d{2,4}|–∑–∞–≤—Ç—Ä–∞|–ø—ñ—Å–ª—è–∑–∞–≤—Ç—Ä–∞)\b",
        "time": r"\b(\d{1,2}:\d{2})\b",
        "phone": r"(\+?38)?0\d{9}\b",
        "price": r"\b(\d+([.,]\d+)?)\s*?(–≥—Ä–Ω|‚Ç¥|uah)?\b",
        "city": r"(?i)(–º\.|–º—ñ—Å—Ç–æ|—Å–º—Ç|—Å–µ–ª–æ)\s+([–ê-–Ø–á–Ü–Ñ“ê“ë–∞-—è—ó—ñ—î“ë º\s-]+)",
        "name": r"(—ñ–º['‚Äô—è]—è|–∑–∞–º–æ–≤–Ω–∏–∫):?\s*([–ê-–Ø–á–Ü–Ñ“ê“ë][–∞-—è—ó—ñ—î“ë º]+(?:\s[–ê-–Ø–á–Ü–Ñ“ê“ë][–∞-—è—ó—ñ—î“ë º]+)*)",
        "type": r"(?i)\b(–≤–∏–Ω–æ—Å|—Ç–æ–ø–æ–∑–π–æ–º–∫–∞|–ø—Ä–∏–≤–∞—Ç–∏–∑–∞—Ü—ñ—è)\b",
    }

    result = {}
    text_lower = text.lower()

    # –¢–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è
    type_match = re.search(patterns["type"], text_lower)
    if type_match:
        result["type"] = type_match.group(1).capitalize()
    else:
        keywords = {
            "–≤–∏–Ω–æ—Å": ["–≤–∏–≤—ñ–∑", "—Å–º—ñ—Ç—Ç—è", "–º–µ–±–ª—ñ", "–ø–æ–±—É—Ç–æ–≤–∞ —Ç–µ—Ö–Ω—ñ–∫–∞", "–≤–∞–Ω—Ç–∞–∂"],
            "—Ç–æ–ø–æ–∑–π–æ–º–∫–∞": ["—Ç–æ–ø–æ—Å—ä–µ–º–∫–∞", "–≥–µ–æ–¥–µ–∑—ñ—è", "–ø–ª–∞–Ω –º—ñ—Å—Ü–µ–≤–æ—Å—Ç—ñ", "—Ä–æ–∑–º—ñ—Ç–∫–∞", "–∫–∞–¥–∞—Å—Ç—Ä"],
            "–ø—Ä–∏–≤–∞—Ç–∏–∑–∞—Ü—ñ—è": ["–ø—Ä–∏–≤–∞—Ç–∏–∑–∞—Ü—ñ—è", "–¥–æ–∫—É–º–µ–Ω—Ç–∏", "–∑–µ–º–ª—è", "–∫–≤–∞—Ä—Ç–∏—Ä–∞", "–±—É–¥–∏–Ω–æ–∫", "—Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è"]
        }
        for task_type, words in keywords.items():
            if any(word in text_lower for word in words):
                result["type"] = task_type.capitalize()
                break
        else:
            result["type"] = "–Ü–Ω—à–µ"

    # –î–∞—Ç–∞ —Ç–∞ —á–∞—Å
    parsed_datetime = dateparser.parse(
        text, 
        languages=['uk'], 
        settings={'PREFER_DATES_FROM': 'future'}
    )
    if parsed_datetime:
        result["datetime"] = parsed_datetime
    else:
        result["datetime"] = datetime.datetime.now()

    # –¢–µ–ª–µ—Ñ–æ–Ω
    phone_match = re.search(patterns["phone"], text)
    if phone_match:
        result["phone"] = phone_match.group(0).replace(" ", "")

    # –í–∞—Ä—Ç—ñ—Å—Ç—å
    price_match = re.search(patterns["price"], text, re.IGNORECASE)
    if price_match:
        result["price"] = float(price_match.group(1).replace(",", "."))

    # –ú—ñ—Å—Ç–æ
    city_match = re.search(patterns["city"], text, re.IGNORECASE)
    if city_match:
        result["city"] = city_match.group(2).strip()

    # –Ü–º'—è
    name_match = re.search(patterns["name"], text, re.IGNORECASE)
    if name_match:
        result["name"] = name_match.group(2).strip()

    return result

# =========================
# –û–°–ù–û–í–ù–ê –õ–û–ì–Ü–ö–ê
# =========================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

async def handle_free_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    parsed_data = extract_data(user_text)
    
    if not parsed_data.get("type") or not parsed_data.get("datetime"):
        await update.message.reply_text(
            "üîç –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞–Ω—ñ. –ü—Ä–∏–∫–ª–∞–¥:\n"
            "‚ñ∂ '–í–∏–≤—ñ–∑ –º–µ–±–ª—ñ–≤ 25.12 –æ 14:00, –º. –ö–∏—ó–≤, 0991234567, –Ü–º'—è: –ü–µ—Ç—Ä–æ, 1500 –≥—Ä–Ω'"
        )
        return

    try:
        task_data = {
            "type": parsed_data["type"],
            "datetime": parsed_data["datetime"],
            "city": parsed_data.get("city", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"),
            "phone": parsed_data.get("phone", "–ë–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω—É"),
            "price": parsed_data.get("price", 0),
            "name": parsed_data.get("name", "–ë–µ–∑ —ñ–º–µ–Ω—ñ"),
        }
        
        await task_manager.save_task(update.effective_user.id, task_data)
        response = "‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ–¥–∞–Ω–æ!\n" + "\n".join(
            f"‚Ä¢ {k}: {v}" for k, v in parsed_data.items() if v
        )
        await update.message.reply_text(response)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

async def view_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    tasks = await task_manager.get_tasks(user_id, "uncompleted")
    
    if not tasks:
        await update.message.reply_text("üì≠ –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å!")
        return

    keyboard = [
        [
            InlineKeyboardButton(f"‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ {task[0]}", callback_data=f"delete_{task[0]}"),
            InlineKeyboardButton(f"‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ {task[0]}", callback_data=f"complete_{task[0]}"),
        ]
        for task in tasks
    ]
    
    await update.message.reply_text(
        "üìã –ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data

    if data.startswith("delete_"):
        task_id = int(data.split("_")[1])
        await task_manager.delete_task(task_id)
        await query.answer(f"–ó–∞–≤–¥–∞–Ω–Ω—è {task_id} –≤–∏–¥–∞–ª–µ–Ω–æ!")
    elif data.startswith("complete_"):
        task_id = int(data.split("_")[1])
        await task_manager.complete_task(task_id)
        await query.answer(f"–ó–∞–≤–¥–∞–Ω–Ω—è {task_id} –≤–∏–∫–æ–Ω–∞–Ω–æ!")

    await query.message.delete()

async def view_completed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    tasks = await task_manager.get_tasks(user_id, "completed")
    
    if not tasks:
        await update.message.reply_text("üì≠ –ù–µ–º–∞—î –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å!")
        return

    text = "\n".join(
        f"‚úÖ [ID:{task[0]}] {task[2]} - {datetime.datetime.fromisoformat(task[9]).strftime('%d.%m.%Y %H:%M')}"
        for task in tasks
    )
    await update.message.reply_text(f"üìã –í–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:\n{text}")

async def daily_reminder(context: CallbackContext):
    users = await task_manager.get_all_users()
    for user in users:
        user_id = user[0]
        tasks = await task_manager.get_tasks(user_id, "uncompleted")
        if tasks:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è! –£ –≤–∞—Å {len(tasks)} –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å."
            )

# =========================
# –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –î–û–î–ê–¢–ö–£
# =========================

def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & ~filters.Text(["–î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è"]),
        handle_free_text
    ))

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Text(["–ü–µ—Ä–µ–≥–ª—è–¥ –∑–∞–≤–¥–∞–Ω—å"]), view_tasks))
    app.add_handler(MessageHandler(filters.Text(["–í–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è"]), view_completed))
    app.add_handler(CallbackQueryHandler(button_handler))

    app.job_queue.run_daily(daily_reminder, time=datetime.time(hour=9))

    app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(task_manager.init_db())
    main()
